# -*- coding: utf-8 -*-
"""hill.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Meo5NuAk3-aSYt5U2leT0gwAgf24-aRU
"""

# Following function generates the
# key matrix for the key string
def getKeyMatrix(key, n):
    keyMatrix = [[0] * n for i in range(n)]
    k = 0
    for i in range(n):
        for j in range(n):
            keyMatrix[i][j] = ord(key[k]) % 65
            k += 1
    return keyMatrix

# Following function encrypts the message
def encrypt(messageVector, keyMatrix):
    n = len(keyMatrix)
    cipherMatrix = [[0] for i in range(n)]
    for i in range(n):
        for j in range(1):
            cipherMatrix[i][j] = 0
            for x in range(n):
                cipherMatrix[i][j] += (keyMatrix[i][x] *
                                       messageVector[x][j])
            cipherMatrix[i][j] = cipherMatrix[i][j] % 26
    return cipherMatrix

def HillCipher(message, key):

    # Get the length of key matrix
    n = len(message)

    # Get key matrix from the key string
    keyMatrix = getKeyMatrix(key, n)

    # Generate vector for the message
    messageVector = [[0] for i in range(n)]
    for i in range(n):
        messageVector[i][0] = ord(message[i]) % 65

    # Following function generates
    # the encrypted vector
    cipherMatrix = encrypt(messageVector, keyMatrix)

    # Generate the encrypted text
    # from the encrypted vector
    CipherText = []
    for i in range(n):
        CipherText.append(chr(cipherMatrix[i][0] + 65))

    # Finally print the ciphertext
    print("Ciphertext: ", "".join(CipherText))

# Driver Code
def main():

    # Get the message to
    # be encrypted
    message = input("Enter the message to be encrypted: ").upper()

    # Get the key
    key = input("Enter the key: ").upper()

    HillCipher(message, key)

if __name__ == "__main__":
    main()