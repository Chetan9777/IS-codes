# -*- coding: utf-8 -*-
"""aes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15sg7naATRzjHH0a1Jrte8usOY50tjm1F
"""

pip install pycryptodome

from Crypto.Cipher import AES
from secrets import token_bytes

key = token_bytes(16)

def encrypt(msg):
    cipher = AES.new(key, AES.MODE_EAX)
    nonce = cipher.nonce
    ciphertext, tag = cipher.encrypt_and_digest(msg.encode('ascii'))
    return nonce, ciphertext, tag

def decrypt(nonce, ciphertext, tag):
    cipher = AES.new(key, AES.MODE_EAX, nonce=nonce)
    plaintext = cipher.decrypt(ciphertext)
    try:
        cipher.verify(tag)
        return plaintext.decode('ascii')
    except:
        return False

nonce, ciphertext, tag = encrypt(input('Enter a message: '))
plaintext = decrypt(nonce, ciphertext, tag)
print(f'Cipher text: {ciphertext}')
if not plaintext:
    print('Message is corrupted')
else:
    print(f'Plain text: {plaintext}')

from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad, unpad

def encrypt_aes(key, plaintext):
    cipher = AES.new(key, AES.MODE_CBC)
    ciphertext = cipher.encrypt(pad(plaintext, AES.block_size))
    return ciphertext, cipher.iv

def decrypt_aes(key, ciphertext, iv):
    cipher = AES.new(key, AES.MODE_CBC, iv)
    decrypted = unpad(cipher.decrypt(ciphertext), AES.block_size)
    return decrypted

def main():
    # Generate a 256-bit key
    key = get_random_bytes(32)

    # Message to be encrypted
    message = input("Enter the message to be encrypted: ")

    # Convert message to bytes
    plaintext = message.encode('utf-8')

    # Encrypt the message
    ciphertext, iv = encrypt_aes(key, plaintext)

    print("Encrypted message:", ciphertext.hex())
    print("Initialization Vector (IV):", iv.hex())

    # Decrypt the message
    decrypted_message = decrypt_aes(key, ciphertext, iv)
    print("Decrypted message:", decrypted_message.decode('utf-8'))

if __name__ == "__main__":
    main()